import { jsx as E, Fragment as M } from "react/jsx-runtime";
import { useMemo as N, useRef as w, useState as k, useContext as F } from "react";
import { LayoutGroupContext as G } from "../../context/LayoutGroupContext.js";
import { useConstant as O } from "../../utils/use-constant.js";
import { useIsomorphicLayoutEffect as R } from "../../utils/use-isomorphic-effect.js";
import { PresenceChild as S } from "./PresenceChild.js";
import { usePresence as V } from "./use-presence.js";
import { onlyElements as v, getChildKey as c } from "./utils.js";
const Q = ({ children: h, custom: A, initial: L = !0, onExitComplete: p, presenceAffectsLayout: b = !0, mode: u = "sync", propagate: l = !1, anchorX: j = "left" }) => {
  const [C, f] = V(l), n = N(() => v(h), [h]), o = l && !C ? [] : n.map(c), y = w(!0), x = w(n), r = O(() => /* @__PURE__ */ new Map()), [D, I] = k(n), [i, P] = k(n);
  R(() => {
    y.current = !1, x.current = n;
    for (let t = 0; t < i.length; t++) {
      const e = c(i[t]);
      o.includes(e) ? r.delete(e) : r.get(e) !== !0 && r.set(e, !1);
    }
  }, [i, o.length, o.join("-")]);
  const d = [];
  if (n !== D) {
    let t = [...n];
    for (let e = 0; e < i.length; e++) {
      const s = i[e], a = c(s);
      o.includes(a) || (t.splice(e, 0, s), d.push(s));
    }
    return u === "wait" && d.length && (t = d), P(v(t)), I(n), null;
  }
  process.env.NODE_ENV !== "production" && u === "wait" && i.length > 1 && console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to "wait". This will lead to odd visual behaviour.`);
  const { forceRender: m } = F(G);
  return E(M, { children: i.map((t) => {
    const e = c(t), s = l && !C ? !1 : n === i || o.includes(e), a = () => {
      if (r.has(e))
        r.set(e, !0);
      else
        return;
      let g = !0;
      r.forEach((K) => {
        K || (g = !1);
      }), g && (m == null || m(), P(x.current), l && (f == null || f()), p && p());
    };
    return E(S, { isPresent: s, initial: !y.current || L ? void 0 : !1, custom: A, presenceAffectsLayout: b, mode: u, onExitComplete: s ? void 0 : a, anchorX: j, children: t }, e);
  }) });
};
export {
  Q as AnimatePresence
};
