import { isHTMLElement as c } from "../../../utils/is-html-element.js";
import { memo as l } from "../../../../../../motion-utils/dist/es/memo.js";
const f = /* @__PURE__ */ new Set([
  "opacity",
  "clipPath",
  "filter",
  "transform"
  // TODO: Could be re-enabled now we have support for linear() easing
  // "background-color"
]), u = /* @__PURE__ */ l(() => Object.hasOwnProperty.call(Element.prototype, "animate"));
function d(o) {
  var t;
  const { motionValue: e, name: r, repeatDelay: a, repeatType: n, damping: p, type: s } = o;
  if (!c((t = e == null ? void 0 : e.owner) == null ? void 0 : t.current))
    return !1;
  const { onUpdate: m, transformTemplate: i } = e.owner.getProps();
  return u() && r && f.has(r) && (r !== "transform" || !i) && /**
   * If we're outputting values to onUpdate then we can't use WAAPI as there's
   * no way to read the value from WAAPI every frame.
   */
  !m && !a && n !== "mirror" && p !== 0 && s !== "inertia";
}
export {
  d as supportsBrowserAnimation
};
