import { resolveVariant as g } from "../../render/utils/resolve-dynamic-variants.js";
import { animateTarget as l } from "./visual-element-target.js";
function C(r, t, n = {}) {
  var c;
  const i = g(r, t, n.type === "exit" ? (c = r.presenceContext) == null ? void 0 : c.custom : void 0);
  let { transition: a = r.getDefaultTransition() || {} } = i || {};
  n.transitionOverride && (a = n.transitionOverride);
  const s = i ? () => Promise.all(l(r, i, n)) : () => Promise.resolve(), o = r.variantChildren && r.variantChildren.size ? (e = 0) => {
    const { delayChildren: d = 0, staggerChildren: m, staggerDirection: h } = a;
    return y(r, t, d + e, m, h, n);
  } : () => Promise.resolve(), { when: f } = a;
  if (f) {
    const [e, d] = f === "beforeChildren" ? [s, o] : [o, s];
    return e().then(() => d());
  } else
    return Promise.all([s(), o(n.delay)]);
}
function y(r, t, n = 0, i = 0, a = 1, s) {
  const o = [], f = (r.variantChildren.size - 1) * i, c = a === 1 ? (e = 0) => e * i : (e = 0) => f - e * i;
  return Array.from(r.variantChildren).sort(u).forEach((e, d) => {
    e.notify("AnimationStart", t), o.push(C(e, t, {
      ...s,
      delay: n + c(d)
    }).then(() => e.notify("AnimationComplete", t)));
  }), Promise.all(o);
}
function u(r, t) {
  return r.sortNodePosition(t);
}
export {
  C as animateVariant,
  u as sortByTreeOrder
};
